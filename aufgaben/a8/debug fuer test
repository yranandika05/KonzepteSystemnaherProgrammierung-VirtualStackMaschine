void list(void){
    int programmCounterBehaelter;
    programmCounterBehaelter=pc;
    pc=0;
    while(pc<binaryData[2]){
            instruction = programMemory[pc];
            print(instruction);         
            pc++;
        }       
    instruction=99;
    pc=programmCounterBehaelter;
    printf("                ---- end of programm ----\n");
}
void inspectStack(void){
    int i,k;
    if(sp==0){
        printf("sp, fp    -->     %04d:   (xxxxxx)  xxxxxx\n",sp);
    }else{
        printf("sp      -->     %04d:   (xxxxxx) xxxxxx\n",sp);
        for(i=sp-1;i>fp;i--){
            if(stack[i].isObjektRef==1){
                printf("                %04d:   (objref) %p\n",i,(void*)stack[i].u.objRef);
            }else{
                printf("                %04d:   (number) %d\n",i,stack[i].u.value);
            }
        }
        if(stack[fp].isObjektRef==1){
            printf("fp      -->     %04d:   (objref) %p\n",fp,(void*)stack[fp].u.objRef);
        }else{
            printf("fp      -->     %04d:   (number) %d\n",fp,stack[fp].u.value);
        }
        if(fp!=0){
            for(k=fp-1;k>=0;k--){
                if(stack[k].isObjektRef==1){
                    printf("                %04d:   (objref) %p\n",k,(void*)stack[k].u.objRef);
                }else{
                    printf("                %04d:   (number) %d\n",k,stack[k].u.value);
                }
            }
        }
    }
    printf("                ---- bottom of stack ----\n");
}
void inspectData(void){
    int i;
    for(i=0;i<binaryData[3];i++){
        printf("data[%04d]:       (objeref) %p\n",i,(void*)sda[i]);
    }
    printf("                ---- end of data ----\n");
}
void inspectObject(void){
    int k;
    printf("Object reference ?\n");
    scanf("%p",(void**)&bip.op1);
    if(IS_PRIM(bip.op1)){
        printf("<primitive object>\nValue =         ");
        bigPrint(stdout);
        printf("\n");
    }else{
        printf("<compound object>\n");
        printf("Size of compound object: %d, with sizeOf:  %ld\n",GET_SIZE(bip.op1),sizeof(bip.op1));
        for(k=0;k<GET_SIZE(bip.op1);k++){
            bip.op2 =*(GET_REFS(bip.op1) + k);
            printf("field[%04d]:	(objref)  %p     \n",k,(void*)bip.op2);
        }
    }
    printf("                ---- end of object ----\n");
}
void inspectHeap(void){
    printf("heap: %p\n",(void*)(ObjRef)(heap));
    printf("targetHeap: %p\n",(void*)(ObjRef)(heapTarget));
    printf("toSpace: %p\n",(void*)(ObjRef)(toSpace));
    printf("heapScanPointer: %p\n",(void*)(ObjRef)(scan));
    printf("HeapFreiPointer: %p\n",(void*)(ObjRef)(heapFreePointer));
    printf("                ---- end of heap ----\n");
}   
void breakPointSet(void){
    scanf("%d",&stopPoint);
    if(stopPoint>0){
        stopPoint=stopPoint;
        printf("DEBUG [breakpoint]: now set at %d\n",stopPoint);
    }else if(stopPoint<0){
        stopPoint=-1;
        printf("DEBUG [breakpoint]: now cleared\n");
    }
}
void quit(void){
    exit(1);
}
void step(void){
    instruction = programMemory[pc];
    print(instruction);
    pc++;
    execute(instruction);   
    if(instruction==0){
        exit(0);
    }
}

void runDebuger(void){
    printf("DEBUG: file   :  '%s'\n       code   :  %d instructions\n       data   :  %d objects\n       stack  :  %ld slots\n       heap   :  2 * %d bytes\n",dataName,binaryData[2],binaryData[3],(sizeOfStack/sizeof(StackSlot)),(sizeOfHeap/2));
    while ((isQuit!=1)){
        printf("DEBUG: inspect, list, breakpoint, step, run, quit?\n");
        scanf("%s",charMemory);
        if(strncmp(charMemory,"quit",1)==0){
            isQuit=1;
            debugIsOn=0;
            exit(0);
        }else if(strncmp(charMemory,"inspect",1)==0){
            printf("DEBUG [inspect]: stack, data, object, heap?\n");
            scanf("%s",charMemory);   
            if((strncmp(charMemory,"stack",1)==0)){
                inspectStack();
            }else if(strncmp(charMemory,"data",1)==0){
                inspectData();
            }else if(strncmp(charMemory,"object",1)==0){
                inspectObject();  
            }else if(strncmp(charMemory,"heap",1)==0){
                inspectHeap();  
            }else{
                printf("DEBUG: inspect, list, breakpoint, step, run, quit?\n");
                scanf("%s",charMemory);    
            }
        }else if((strncmp(charMemory,"step",1)==0)){
            step();
        }else if(strncmp(charMemory,"list",1)==0){
            list();
        }else if(strncmp(charMemory,"breakpoint",1)==0){
            if(stopPoint!=-1){
                printf("DEBUG [breakpoint]: set at %d\n",stopPoint);
            }else{
                printf("DEBUG [breakpoint]: cleared\n");
            }
            printf("DEBUG [breakpoint]: address to set, -1 to clear, <ret> for no change?\n");
            breakPointSet();
        }else if(strncmp(charMemory,"run",1)==0){
            runInstruction();   
            if(stopPoint<0){
                exit(0);
            }
        } 
    } 
}

